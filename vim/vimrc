" not load for tiny vi
if !1 | finish | endif

filetype plugin on
filetype indent on
syntax on

set number      " Show line numbers
set textwidth=100   " Line wrap (number of cols)
set showmatch   " Highlight matching brace
set visualbell  " Use visual bell (no beeping)
set title             " change the terminal's title
set mouse=a           " enable mouse in all modes
set clipboard^=unnamedplus
set guioptions+=a
" New splits open to right and bottom
set splitbelow
set splitright
" Autofolding
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldcolumn=2
set report=0
" Search option
set hlsearch
set incsearch
set cursorline            " Color the cursorline
set undolevels=2000       " Number of undo levels
set backspace=indent,eol,start  " Intuitive backspacing in insert mode
set ignorecase
set smartcase
set infercase       " Adjust case in insert completion mode
set wrapscan        " Searches wrap around the end of the file
set showmatch       " Jump to matching bracket
" Cleanup
set nobackup
set nowritebackup
set noswapfile
set hidden
set completeopt=menu,noinsert
" Statusline
set laststatus=2
" Tabbar
set showtabline=2  " Show tabline
set guioptions-=e  " Don't use GUI tabline
" Frequency update
set updatetime=250
" Behaviour
set nostartofline               " Cursor in same column for few commands
set whichwrap+=h,l,<,>,[,],~    " Move to following line on certain keys
set showfulltag                 " Show tag and tidy search in completion
set noshowmode          " Don't show mode in cmd window
set shortmess=aoOTI     " Shorten messages and don't show intro
set scrolloff=2         " Keep at least 2 lines above/below
set sidescrolloff=5     " Keep at least 5 lines left/right
set noshowcmd           " Don't show command in status line
" Enable indent
set autoindent
set sw=4
set shiftwidth=4     " Number of auto-indent spaces
set smarttab         " Enable smart-tabs
set softtabstop=4    " Number of spaces per Tab
set expandtab
set pumheight=15
" Set the file path as pwd
set autochdir
" Set global replacement as the default
set gdefault
" Better wrapping with indentation
set breakindent
set showbreak=\\\\\
set wildmenu
" Set color
set guifont=DroidSansMono\ Nerd\ Font\ 11
colorscheme valloric
" exclusions from the autocomplete menu
set wildoptions=tagfile
set wildignorecase
set wildignore+=*.so
set wildignore+=.git,.hg,.svn,.stversions,*.pyc,*.spl,*.o,*.out,*~,%*
set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.log,**/tmp/**
set wildignore+=**/node_modules/**,**/bower_modules/**,*/.sass-cache/*
set wildignore+=__pycache__,*.egg-info
set wildignore+=*.o,*.out,*.obj,*.rbc,*.rbo,*.class,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,*~,._*,*/vendor/cache/*,*/.sass-cache/*
set wildignore+=*/public/assets/*,*/tmp/cache/assets/*/sass/*
set wildignore+=*DS_Store*

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
    " Package manager
    Plugin 'VundleVim/Vundle.vim'
    " Show "Match 123 of 456 /search term/" in Vim searches
    Plugin 'henrik/vim-indexed-search'
    " wrapper for git and display git diff in the left gutter
    Plugin 'tpope/vim-fugitive'
    Plugin 'airblade/vim-gitgutter'
    " surrounding with whatever you want (paranthesis, quotes...)
    Plugin 'tpope/vim-surround'
    " autoclose bracket and parenthesis when open
    Plugin 'Townk/vim-autoclose'
    " Valloric/MatchTagAlways
    Plugin 'Valloric/MatchTagAlways'
    " close tags on </
    Plugin 'docunext/closetag.vim'
    " Better terminal detection
    Plugin 'wincent/terminus'
    " Indentation is very helpful
    Plugin 'Yggdroot/indentLine'
    " Folding fast is important
    Plugin 'Konfekt/FastFold'
    " Remove trailing whitespaces
    Plugin 'vim-scripts/DeleteTrailingWhitespace'
    " Improve scrolloff area
    Plugin 'drzel/vim-scroll-off-fraction'
    " Underlines the words under your cursor
    Plugin 'itchyny/vim-cursorword'
    " Auto cwd
    Plugin 'airblade/vim-rooter'
    " startify for a cool home page
    Plugin 'mhinz/vim-startify'
    " session
    Plugin 'xolox/vim-misc'
    " check https://github.com/xolox/vim-session/pull/144
    Plugin 'xolox/vim-session'
    " Autocomplete system in real time
    if has('nvim')
        Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
        Plugin 'roxma/vim-hug-neovim-rpc'
        Plugin 'roxma/nvim-yarp'
        Plugin 'Shougo/deoplete.nvim'
    endif
    " Snippets engine and... snippets!
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    Plugin 'sniphpets/sniphpets'
    Plugin 'sniphpets/sniphpets-common'
    " markdown
    Plugin 'plasticboy/vim-markdown'
    " php doc autocompletion
    Plugin 'tobyS/vmustache' | Plugin 'tobyS/pdv'
    " object view
    Plugin 'majutsushi/tagbar'
    Plugin 'lvht/tagbar-markdown'
    Plugin 'hushicai/tagbar-javascript.vim'
    Plugin 'mtscout6/vim-tagbar-css'
    " Nerdtree + modifications: git icons plugin, color filetype plugin
    Plugin 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']}
    Plugin 'Xuyuanp/nerdtree-git-plugin'
    Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'
    Plugin 'jistr/vim-nerdtree-tabs'
    " Status bar
    Plugin 'jacoborus/tender.vim'
    Plugin 'itchyny/lightline.vim'
    Plugin 'macthecadillac/lightline-gitdiff'
    " Tags are very important
    Plugin 'ludovicchabant/vim-gutentags'
    " https://github.com/vim-php/phpctags/pull/82/files
    Plugin 'vim-php/tagbar-phpctags.vim'
    " undo tree
    Plugin 'sjl/gundo.vim'
    " select text
    Plugin 'terryma/vim-expand-region'
    if !has('gui_running')
        " fzf - poweful search
        Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plugin 'junegunn/fzf.vim'
    endif
    " allow multisearch in current directory / multi replace as well
    Plugin 'wincent/ferret'
    " display the hexadecimal colors - useful for css and color config
    Plugin 'chrisbra/colorizer'
    " Cool icons"
    Plugin 'ryanoasis/vim-devicons'
    " Report lint errors
    Plugin 'w0rp/ale'
    Plugin 'maximbaz/lightline-ale'
    " Wakatime
    Plugin 'wakatime/vim-wakatime'
    " Misc
    Plugin 'editorconfig/editorconfig-vim'
    " PHP syntax
    Plugin 'StanAngeloff/php.vim'
    Plugin 'arnaud-lb/vim-php-namespace'
    Plugin '2072/vim-syntax-for-PHP.git'
    Plugin 'nishigori/vim-php-dictionary'
    Plugin '2072/PHP-Indenting-for-VIm'
    " Comments
    Plugin 'scrooloose/nerdcommenter'
    " highlights which characters to target
    Plugin 'unblevable/quick-scope'
    " WordPress
    Plugin 'salcode/vim-wordpress-dict'
    Plugin 'sudar/vim-wordpress-snippets'
    " Web
    Plugin 'othree/html5.vim'
    Plugin 'mattn/emmet-vim'
    Plugin 'hail2u/vim-css3-syntax'
    Plugin 'groenewege/vim-less'
    Plugin 'othree/csscomplete.vim'
    Plugin 'stephpy/vim-yaml'
    " Javascript
    Plugin 'moll/vim-node'
    Plugin 'pangloss/vim-javascript'
    Plugin 'othree/javascript-libraries-syntax.vim'
    Plugin '1995eaton/vim-better-javascript-completion'
    Plugin 'mklabs/grunt.vim'
    " Syntax highlighting for vue js framework
    Plugin 'posva/vim-vue'
    " Syntax highlighting for JSX
    Plugin 'mxw/vim-jsx'
    " Syntax highlighting for coffeescript
    Plugin 'kchmck/vim-coffee-script'
    Plugin 'lukaszkorecki/CoffeeTags'
    " Syntax highlighting for webapi
    Plugin 'mattn/webapi-vim'
    " Syntax highlighting for json
    Plugin 'elzr/vim-json'
    " Open docs on K
    Plugin 'rhysd/devdocs.vim'
call vundle#end()

let g:sessions_dir = '~/.vim/sessions'
augroup default
    autocmd!
    " Add support of stuff on different files
    autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
    autocmd BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
    autocmd FileType php setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent
    autocmd FileType php.wordpress setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent
    autocmd FileType javascript setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
    autocmd FileType php let b:surround_45 = "<?php \r ?>"
    " Alias for git add
    autocmd User fugitive command! -bar -buffer -nargs=* Gadd :Gwrite <args>
    " Autosave session
    autocmd BufRead,BufReadPost,BufNewFile,BufFilePost * :SaveSession
augroup END
" nerdtree configuration
function! NERDTreeToggleInCurDir()
  " If NERDTree is open in the current buffer
  if (exists('t:NERDTreeBufName') && bufwinnr(t:NERDTreeBufName) != -1)
    exe ':NERDTreeClose'
  else
    if (expand('%:t') != '')
      exe ':NERDTreeFind'
    else
      exe ':NERDTreeToggle'
    endif
  endif
endfunction
"  don't display informations (type ? for help and so on)
let g:NERDTreeMinimalUI = 1
"  don't replace the native vim file explorer
let g:NERDTreeHijackNetrw = 1
let g:NERDTreeChDirMode = 2
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeShowBookmarks = 0
let g:NERDTreeCascadeOpenSingleChildDir = 1
let g:NERDTreeWinSize=35
"  change the arrows
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
"  ignore files
let NERDTreeIgnore = [
	\ '\.git$', '\.hg$', '\.svn$', '\.stversions$', '\.pyc$', '\.svn$', '__init__.py', 'vendor',
	\ '\.DS_Store$', '\.sass*$', '__pycache__$', '\.egg-info$', '\.cache$','composer','node_modules'
\ ]
" Webdevicons
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let entry_format = "'   ['. index .']'. repeat(' ', (3 - strlen(index)))"
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
if exists('*WebDevIconsGetFileTypeSymbol')  " support for vim-devicons
  let entry_format .= ". WebDevIconsGetFileTypeSymbol(entry_path) .' '.  entry_path"
else
  let entry_format .= '. entry_path'
endif
let g:fzf_action = {
  \ 'return': 'tab split',
\}
let $FZF_DEFAULT_COMMAND = 'ag --ignore-dir .sass-cache --ignore-dir _output --ignore-dir node_modules --ignore-dir vendor -g "" -U --nogroup --column --nocolor --php --html --css --js'

let g:session_directory = '~/.vim/sessions'
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 1
let g:session_silent = 1
" Home tab
let g:startify_bookmarks = [
            \ {'g': '/var/www/VVV/www/glossary/htdocs/wp-content/plugins/glossary/glossary.php'},
            \ {'w': '/var/www/VVV/www/woocommerce/htdocs/wp-content/plugins/woo-fiscalita-italiana/woo-fiscalita-italiana.php'},
            \ {'b': '/var/www/VVV/www/boilerplate/htdocs/wp-content/plugins/'},
            \ {'o': '/home/mte90/Desktop/Prog/GlotDict/'},
            \ {'s': '/home/mte90/Desktop/Prog/Share-Backported/'}
\]
let g:startify_session_dir = '~/.vim/sessions'
let g:startify_lists = [
          \ { 'type': 'files',     'header': ['   Most Recent'] },
          \ { 'type': 'sessions',  'header': ['   Sessions']    },
          \ { 'type': 'bookmarks', 'header': ['   Bookmarks']   },
          \ { 'type': 'commands',  'header': ['   Commands']    },
\ ]
let g:startify_custom_header = map(split(system('fortune | cowsay -W 90 -f eyes'), '\n'), '" ". v:val')
let g:startify_files_number = 5
let g:startify_padding_left = 5
" Find root
let g:rooter_patterns = ['.git/']
let g:rooter_use_lcd = 1
let g:rooter_resolve_links = 1
let g:rooter_silent_chdir = 1
" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#min_pattern_length = 1
let g:deoplete#skip_chars = ['(', ')', '<', '>']
let g:deoplete#tag#cache_limit_size = 800000
"  deoplete tab-complete
let g:deoplete#file#enable_buffer_path = 1
"  delay for auto complete and refresh
let g:deoplete#auto_refresh_delay= 5
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_camel_case = 1
let g:deoplete#enable_refresh_always = 1
"  Other stuff
let g:deoplete#omni_patterns = {}
let g:deoplete#sources = {}
let g:deoplete#sources.php = ['ultisnips', 'buffer', 'omni', 'tag']
let g:deoplete#delimiters = ['/', '.', '::', ':', '#', '->']
let g:deoplete_ignore_sources = {}
let g:deoplete_ignore_sources.html = ['syntax']
let g:deoplete#omni#functions = get(g:, 'deoplete#omni#functions', {})
let g:deoplete#omni#functions.css = 'csscomplete#CompleteCSS'
let g:deoplete#omni#functions.html = 'htmlcomplete#CompleteTags'
let g:deoplete#omni_patterns = get(g:, 'deoplete#omni_patterns', {})
let g:deoplete#omni_patterns.html = '<[^>]*'
let g:deoplete#omni_patterns.php = '\h\w*\|[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
let g:deoplete#omni#input_patterns = get(g:, 'deoplete#omni#input_patterns', {})
let g:deoplete#omni#input_patterns.xml = '<[^>]*'
let g:deoplete#omni#input_patterns.md = '<[^>]*'
let g:deoplete#omni#input_patterns.css  = '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]'
let g:deoplete#omni#input_patterns.scss = '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]'
let g:deoplete#omni#input_patterns.sass = '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]'
let g:deoplete#omni#input_patterns.python = ''
let g:deoplete#omni#input_patterns.javascript = ''
" Close the documentation window when completion is done
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
" GutenTags
let g:gutentags_enabled                  = 1
let g:gutentags_generate_on_missing      = 1
let g:gutentags_generate_on_new          = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_define_advanced_commands = 1
let g:gutentags_resolve_symlinks = 1
let g:gutentags_file_list_command = {
      \   'markers': {
      \     '.git': 'git ls-files',
      \     '.hg': 'hg files',
      \   },
\ }
let g:gutentags_ctags_exclude = ['*lock', '*.json', '*.xml', '*.yml',
                            \ '*.phar', '*.ini', '*.rst', '*.md',
                            \ '*vendor/*/test*', '*lib/**',
                            \ '*vendor/**', '*tests*',
                            \ '*var/cache*', '*var/log*'
\ ]
let g:gutentags_cache_dir = '~/.vim/tags/'
let g:gutentags_project_root = ['/var/www/VVV/www/', '/home/mte90/Desktop/VVV/www/']
" A better line
let g:lightline_gitdiff#indicator_added = '+'
let g:lightline_gitdiff#indicator_deleted = '-'
let g:lightline_gitdiff#indicator_modified = '!'
let g:lightline_gitdiff#min_winwidth = '70'
let g:lightline = {
    \ 'colorscheme': 'tender',
    \ 'active': {
    \   'left': [['mode', 'paste'], ['readonly', 'filename', 'modified'], ['tagbar', 'gitbranch', 'gitstatus']],
    \   'right': [['lineinfo'], ['filetype'], [ 'linter_errors', 'linter_warnings', 'linter_ok' ]]
    \ },
    \ 'inactive': {
    \   'left': [['mode', 'paste'], ['readonly', 'filename', 'modified'], ['tagbar', 'gitbranch', 'gitstatus']],
    \   'right': [['lineinfo'], ['filetype']]
    \ },
    \ 'component': {
    \   'lineinfo': '%l\%L [%p%%]',
    \   'tagbar': '%{tagbar#currenttag("[%s]", "", "f")}',
    \   'gitbranch': '%{&filetype=="help"?"":exists("*fugitive#head")?fugitive#head():""}',
    \   'gitstatus': '%<%{lightline_gitdiff#get_status()}',
    \ },
    \ 'component_visible_condition': {
    \   'gitstatus': 'lightline_gitdiff#get_status() !=# ""',
    \ },
    \ 'component_function': {
    \   'filetype': 'MyFiletype',
    \   'fileformat': 'MyFileformat',
    \ },
    \ 'component_expand': {
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ },
    \ 'component_type': {
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \ },
    \ 'subseparator': {
    \   'left': '', 'right': ''
    \ },
    \ 'separator': {
    \   'left': '', 'right': ''
    \ },
    \ 'tabline': {
    \   'left': [ ['tabs'] ],
    \   'right': [ ['close'] ]
    \ }
\ }
function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction
function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
" Emmett
let g:user_emmet_install_global = 1
" Editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" PhpActor
let g:phpactorOmniError = v:true
" PhpDoc
let g:pdv_template_dir = $HOME .'/.vim/bundle/pdv/templates_snip'
" Ultisnip
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsEditSplit='vertical'
" JS smart complete
let g:vimjs#smartcomplete = 1
" Ale linting (installed on system: phpmd, phpcs, coffeelint, sass-lint, htmlhint, prettier)
let g:ale_php_phpcs_standard  = '/home/mte90/Desktop/Prog/CodeatCS/codeat.xml'
let g:ale_php_phpmd_ruleset = 'cleancode,codesize,design,naming,unusedcode'
let g:ale_php_langserver_executable = '/opt/php-language-server/bin/php-language-server.php'
let g:ale_linters = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'bash': ['shellcheck'],
\   'coffee': ['coffeelint'],
\   'css': ['prettier'],
\   'html': ['htmlhint'],
\   'javascript': ['eslint'],
\   'markdown': ['remark-lint'],
\   'php': ['phpcs', 'phpmd', 'langserver'],
\   'sass': ['sass-lint'],
\   'scss': ['sass-lint'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'bash': ['shellcheck'],
\   'coffee': ['coffeelint'],
\   'css': ['prettier'],
\   'html': ['htmlhint'],
\   'javascript': ['eslint', 'prettier'],
\   'markdown': ['remark-lint'],
\   'php': ['php-cs-fixer', 'phpmd', 'prettier'],
\   'sass': ['sass-lint'],
\   'scss': ['sass-lint'],
\}
let g:PHP_vintage_case_default_indent = 1
" Sometimes phpcbf replace the content of the file with the output of the command with ale
let g:ale_fix_on_save = 0
let g:ale_sign_error = 'EE'
let g:ale_sign_warning = 'WW'
let g:ale_change_sign_column_color = 1
let g:ale_completion_enabled = 1
" php
let g:PHP_autoformatcomment = 1
" Indent lines
let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'startify']
let g:indentLine_char = '┊'
" Nerdcommenter for... better comments
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
" Tagbar
let g:tagbar_width = 30
let g:tagbar_indent = 1
let g:tagbar_autoshowtag = 2
let g:tagbar_singleclick = 1
let g:tagbar_sort = 1
let g:tagbar_type_php  = {
    \ 'kinds'     : [
        \ 'i:interfaces',
        \ 'c:classes',
        \ 'd:constant definitions',
        \ 'f:functions',
        \ 'j:javascript functions:1',
        \ 'v:variables:1'
    \ ]
\ }
fun! s:Phpcbf() abort
    let out = system('phpcbf -p -d memory_limit=512M --standard=/home/mte90/Desktop/Prog/CodeatCS/codeat.xml '.expand('%:'))
endfun
augroup PHP
  autocmd!
  " Check for PHP syntax errors after saving a file
  autocmd BufWritePost *.php call <SID>Phpcbf()
augroup END
augroup fmt
  autocmd!
  " Autoformat in tabs
  autocmd BufWritePre *.php :normal =G
  autocmd BufWritePre *.js :normal =G
  autocmd BufWritePre *.css :normal =G
  autocmd BufWritePre *.sass :normal =G
augroup END
let g:devdocs_open_cmd = 'firefox'
" Trigger a highlight only when pressing f and F.
let g:qs_highlight_on_keys = ['f']
let g:qs_max_chars=80

" Hotkeys
" Remove spaces at the end of lines
nnoremap <silent> ,<Space> :<C-u>silent! keeppatterns %substitute/\s\+$//e<CR>
" Remove highlights
map <esc> :noh<cr>
" Fold code open/close with click
nmap <expr> <2-LeftMouse> 'za'
" Deoplete
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
" Select all
nmap <C-a> GVgg
" Search in the project files
nmap <leader>f :Rg<space>
" Open Folder tab current directory
nmap <leader>n :call NERDTreeToggleInCurDir()<CR>
" Open folder tab
nmap <C-p> :NERDTreeTabsToggle<CR>
" To search on history with fuzzy
nmap <leader>h :History<cr>
" Object view
nmap <C-t> :TagbarToggle<CR>
" Undo tree tab
nmap <leader>g :GundoToggle<CR>
nmap <leader>x :Files<CR>
map <silent> <C-w> <Plug>(expand_region_expand)
map <silent> <C-r> <Plug>(expand_region_shrink)
" Emmett
if has('nvim')
    let g:user_emmet_leader_key='<C-E>' " require also a comma ,
else
    let g:user_emmet_leader_key='<M-E>' " require also a comma ,
endif
" navigate between errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-q> <Plug>(ale_fix)
" Toggle comments
nmap <C-d> <plug>NERDCommenterToggle<CR>
" Append ; to the end of the line -> CTRL+B
map <C-b> :call setline('.', getline('.') . ';')<CR>
" Granular undo
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>
inoremap <bs>  <c-g>u<bs>
inoremap <del> <c-g>u<del>
imap <Space> <Space><C-G>u
" Standard hotkeys
vnoremap <C-c> "+y
vnoremap <D-c> "+y
vnoremap <C-x> "+d
vnoremap <D-x> "+d
inoremap <C-v> <Esc>"+gpa
inoremap <D-v> <Esc>"+gpa
vnoremap <C-z> "u
nmap <M-Right> :tabnext<CR>
nmap <M-Left> :tabprevious<CR>
nmap K <Plug>(devdocs-under-cursor)
